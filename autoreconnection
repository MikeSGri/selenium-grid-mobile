#!/usr/bin/env bash

import os
import subprocess
from sys import stderr
import time
import subprocess
from typing import overload


#Containers and devices
containers = ["3b1fc7b93c40","c06075e0526d", "4bfaca1ac78e","4a80442c8847","a1e4f484f56f","7aa15383d6c6","ecc064f55dc9","c19e1c57ee43","f19b5173b2ac"]
containerTask = 0
device = ["17abea03","5200f8924f569501","52000239422d26cf","52003603eaaa5543","b151dee9","0a3750f5","81b768b0","5200bcacb46155a1", "a971f2de"]
deviceTask = 0
numberOfDevice= 9

active = True
attempt = 0
incontainer = False
#tasks
#searchLocally = "adb -s " + device[containerTask]+ " shell svc data enable"
seachInContainer = "docker exec -it " + containers[containerTask] + " adb -s " + device[deviceTask] + " shell svc data enable"
restartContainer = "docker restart " + containers[containerTask]
disconnectingFromContainer = "docker exec -it " + containers[containerTask] + " adb -s " + device[deviceTask] + " reconnect"
adbInsideContainer = "docker exec -it " + containers[containerTask] + "  adb devices"
preparingDevice  = "adb -s " + device[deviceTask] + " reboot "
connectingDevice = "adb -s " + device[deviceTask] + " reconnect"
validatingConnection = "docker exec -it " + containers[containerTask] + " adb -s " + device[deviceTask] + " shell svc data enable"
validateDisconnectionLocal = "adb -s " + device[deviceTask] + " shell svc data enable"

def insideContainerTest():
    global seachInContainer
    containerTask = deviceTask
    print("searching for device " + device[deviceTask])
    print("running container: " + containers[containerTask])
    print("running inspection inside designated container \n")
    seachInContainer = "docker exec -it " + containers[containerTask] + " adb -s " + device[deviceTask] + " shell svc data enable"
    try:
        #print("designated \n")
        #print("searching for device " + device[deviceTask])
        #print("running container: " + containers[containerTask])
        process = subprocess.check_output(seachInContainer, stderr=subprocess.STDOUT ,shell=True)
        #print(process)
        print("phone located in container  READY FOR TESTING\n")
        time.sleep(2)
         

    except:
        print("not in the container validating if its located within another container \n") 
        containerSearch()
def containerSearch():
    global containerTask,currentTask, attempt, incontainer,deviceTask,device

    while incontainer ==False:
        seachInContainer = "docker exec -it " + containers[containerTask] + " adb -s " + device[deviceTask] + " shell svc data enable"
        disconnectingFromContainer = "docker exec -it " + containers[containerTask] + " adb -s " + device[deviceTask] + " reconnect"
        try:
            #print("containerSearch")
            #print("validating in container " + containers[containerTask])
            #print("searching for device: " + device[deviceTask])
            #print(seachInContainer)
            process = subprocess.check_output(seachInContainer , stderr=subprocess.STDOUT ,shell=True)
            print("found device")
            if containerTask == deviceTask:
                print("phone in correct location READY FOR TESTING")
                break
            else:
                print("disconnecting phone from wrong container")
                process = subprocess.check_output(disconnectingFromContainer , stderr=subprocess.STDOUT ,shell=True)
                print("PLEASE ENTER DEVICE TO VALIDATE THAT NO TEXTBOX HAS APPEAR\n")
                time.sleep(6)

                containerSearch()
        except:
            #print("device not found in container \n")
            time.sleep(3)
            searchLocally = "adb -s " + device[deviceTask]+ " shell svc data enable"
            containerTask += 1
            print(numberOfDevice)
            if containerTask >= numberOfDevice:
                containerTask = 0
                print("cant find phone in container, valitading if device is located locally \n")
                #print(searchLocally)
                time.sleep(2)
                try:
                    process = subprocess.check_output(searchLocally, stderr=subprocess.STDOUT ,shell=True)
                    #print(process)
                    print("phone located locally \n")
                    localrun()
                except:
                    attempt += 1 
                    print("can find phone locally, searching again inside containers : " + str(attempt))
                    if attempt >= 3:
                        print("CANT FIND DEVICE: " + device[deviceTask] + " PLEASE CHECK TO MAKE SURE IS CONNECTED \n")
                        time.sleep(3)
                        incontainer = True
                    containerSearch()

def localrun():
    global deviceTask, containerTask, restartContainer,preparingDevice,connectingDevice
    print("initiating local run, starting with reinstalation of device")
    containerTask = deviceTask
    restartContainer = "docker restart " + containers[containerTask]
    preparingDevice  = "adb -s " + device[deviceTask] + " reboot "
    validateDisconnectionLocal = "adb -s " + device[deviceTask] + " shell svc data enable"
    adbInsideContainer = "docker exec -it " + containers[containerTask] +" adb devices"
    connectingDevice = "adb -s " + device[deviceTask] + " reconnect"

    #print("searching for device in local funcion " + device[deviceTask])
    #print("running container:" + containers[containerTask])
    time.sleep(2)
    process = subprocess.check_output(preparingDevice, stderr=subprocess.STDOUT ,shell=True)
    print("restarting phone ")
    time.sleep(40)
    isBackOn = False
    timer = 0
    while isBackOn == False:
        try:
            #print("validating if phone has connected correctly ")
            time.sleep(6)
            process = subprocess.check_output(validateDisconnectionLocal , stderr=subprocess.STDOUT ,shell=True)
            isBackOn = True
            print("phone is back on")
        except:
            print("device is still off ")
            timer += 1
            print(timer)
            if timer >= 10:
                timer = 0
                containerSearch()
                
    process = subprocess.check_output(restartContainer , stderr=subprocess.STDOUT ,shell=True)
    print("restarting container first phase")
    time.sleep(5)
    process = subprocess.check_output(adbInsideContainer, stderr=subprocess.STDOUT ,shell=True)
    #print("starting adb server inside container")
    time.sleep(6)
    inContainer = False
    number = 0
    print("attepting to connect device will restart container at 11 attempts")
    while inContainer == False:
        try:
            process = subprocess.check_output(connectingDevice , stderr=subprocess.STDOUT ,shell=True)
            time.sleep(4)
            process = subprocess.check_output(validateDisconnectionLocal , stderr=subprocess.STDOUT ,shell=True)
            number +=1
            #print(number)
            if number >= 11 :
                print("restarting container second phase")
                process = subprocess.check_output(restartContainer , stderr=subprocess.STDOUT ,shell=True)
                time.sleep(8)
                process = subprocess.check_output(adbInsideContainer , stderr=subprocess.STDOUT ,shell=True)
                time.sleep(2)
                number = 0

        except:
            print("device is no longer in located locally, validating if device is connected in container")
            try:
                process = subprocess.check_output(validatingConnection , stderr=subprocess.STDOUT ,shell=True)
                print("device has been place in container, READY FOR TESTING")
                break
            except:
                print("cant find device in container restarting process")
                localrun()

while active == True:
    if containerTask >= numberOfDevice:
        active=False
        print(" Phone validation completed ")
        redo = input("if all devices got connected correctly do you want to continue your order? \n restart test = 1 \n quite = enter \n whats your option ? ")
        #if redo == "1":
            #print("starting agent")
            #process = subprocess.check_output("python3 agente.py -s" , stdout=subprocess.PIPE ,shell=True)
            
        if redo == "2":
            print("restarting test")
            attempt = 0
            active = True
            deviceTask = 0
            containerTask = 0
            insideContainerTest()
        else:
            print("thank you come again")
    else:
        print("initiating next DEVICE")
        print("-------------------------------------------------------------------------------------")
        incontainer=False
        attempt = 0
        insideContainerTest()
        deviceTask += 1
        containerTask += 1
