#!/usr/bin/env bash

import os
import subprocess
from sys import stderr, stdout
import time
from typing import overload
from subprocess import Popen

action= input("what do you want to do ? \nrestart container = 1 \nstop and recreate containers = 2 \nconnect devices without stoping container = 3 \nreconnect phone usb connection=4 \ncorrect internet connection=5 \nfix anydesk connection =6 \nenter answer: ")
if int(action) == 5 or int(action) == 6:
    print("write the container number example usb1") 
    request = input('usb')

time.sleep(8)
global ports, file, containerName
#turning off oc
mobile=["52003603eaaa5543","5200f8924f569501","95cb9b67","52000239422d26cf","3485e052","96eb06e8","0a378d26","5200a3228f0646ed","b151dee9","0a3750f5","5200dafa4281269f","52006d9fee3255e9","17abea03","1708ea4e","RFCR71CB37P","RFCR7199VWP","RFCR50BHYXE","RFCR71BBQYJ","RFCR70NPFHF","RFCR820YP2P","RFCR81D8PDN","RFCR70TJCHN","RFCR80S625R","RFCR80S9XDV","RFCR70NT5RB","RFCR30X577B","RFCR81BWB7A","RFCR81CRFZW","RFCR50AYERF","RFCR71H2S5V","RFCR7147CZN","RFCR711V7ML","R58M66P5RQJ","R58MA2QWTCB","R58N11ERQXZ","R58M875EYLR","R58M74RXDAL","R58M9659ZAB","R58M919QP1W","R58MA78TF8A"]
containers = ["usb1","usb2", "usb3","usb4","usb5","usb6","usb7","usb8", "usb9", "usb10", "usb11", "usb12", "usb13","usb14","usb15", "usb16", "usb17","usb18"]
containerName = 0
deviceNumber = 0
loop= 18
deviceLoop = len(mobile)

def createFolder():
        active = True
        attempt = 0
        incontainer = False
        testing=True
        #docker image for android device
        image = "android-appium"
        #image = "test1"
        location = 1
        while testing == True:
            global list1
            print("looking within directory 00" + str(location))
            command = "ls /dev/bus/usb/00" + str(location) + " | wc -l"
            process = subprocess.Popen([command],stdout=subprocess.PIPE, encoding='utf8',stderr=None, shell=True)
            out, err = process.communicate()
            #return_code = process.returncode
            print("number of subfile found in dirrectory " +str(out))
            time.sleep(2)
            if int(out)>= 3:
                print("creating list")
                command = "ls /dev/bus/usb/00" + str(location)
                process = subprocess.Popen([command],stdout=subprocess.PIPE, encoding='utf8',stderr=None, shell=True)
                out, err = process.communicate()
                result = []
                list1=''.join([i.replace(" ","") for i in out])
                list1= [list1[i:i+3]for i in range(0,len(list1),4)]
                print("lenght of list " +str(len(list1)))
                #print(len(list1))
                print("subfiles found are "+ str(list1))
                testing == False
                break
            if location == 6:
                print("failed to find subfiles")
                break
        
        #turning off adb server if on 
        process = subprocess.Popen(["adb kill-server"],stdout=subprocess.PIPE,stderr=subprocess.PIPE, encoding='utf8', shell=True)
        #out, err  = process.communicate()
        (stdout, stderr) = process.communicate()
        print("turning off adb server if on")

        return_code = process.returncode
        #port where is located
        ports= 4701
        #location 
        file=0
        print("container creation phase")
        #Containers and devices
        containers = ["usb1","usb2", "usb3","usb4","usb5","usb6","usb7","usb8", "usb9", "usb10", "usb11", "usb12", "usb13","usb14","usb15", "usb16", "usb17"]
        containerName = 0
        while testing == True:
            if file>=len(list1):
                print("out")
                break
            #task
            creatingContainer = "docker run -d --rm  -p " + str(ports)+":4723 -v ~/.android:/root/.android --device /dev/bus/usb/00"+str(location)+"/"+list1[file]+" --name "+containers[containerName] + " " +image
            restartingContainer = "docker restart "+containers[containerName]
            createServer = "docker exec -it " +containers[containerName]+" adb devices"
            validateDevice = "docker exec -it " +containers[containerName]+" adb shell svc data enable"
            stopingContainer = "docker stop "+containers[containerName]
            time.sleep(5)
            try:
                process = subprocess.Popen([creatingContainer],stdout=subprocess.PIPE,stderr=subprocess.PIPE, encoding='utf8', shell=True)
                #out, err  = process.communicate()
                (stdout, stderr) = process.communicate()
                print("validating")
                #print(creatingContainer)
                return_code = process.returncode
            except:
                print("test failed to initiate validate the variables positions")

            if return_code == 0:
                print("container has been created")
                print("starting appium server")
                process = subprocess.Popen([createServer],stdout=subprocess.PIPE,stderr=subprocess.PIPE, encoding='utf8', shell=True)
                (stdout, stderr) = process.communicate()
                #print(createServer)
                print("validating if mobile device exist in container ")
                try:
                    process = subprocess.Popen([validateDevice],stdout=subprocess.PIPE,stderr=subprocess.PIPE, encoding='utf8', shell=True)
                    (stdout, stderr) = process.communicate()
                    return_code = process.returncode
                    print(creatingContainer)
                    if return_code == 0:
                        print("device found")
                        ports += 1
                        file += 1
                        containerName += 1
                    if return_code == 1:
                        print("device not found stop container")
                        process = subprocess.Popen([stopingContainer],stdout=subprocess.PIPE,stderr=subprocess.PIPE, encoding='utf8', shell=True)
                        #print(stopingContainer)
                        time.sleep(7)
                        file +=1 
                    if file == len(list1):
                        print("surpass number of available files ")
                except:
                    print("failed to find devices")
            if return_code == 125:
                print("container was already created")
                time.sleep(2)
                try:
                    print("checking if device exists")
                    process = subprocess.Popen([validateDevice],stdout=subprocess.PIPE,stderr=subprocess.PIPE, encoding='utf8', shell=True)
                    (stdout, stderr) = process.communicate()
                    return_code = process.returncode
                    print(validateDevice)
                    print("checking device within already created container")
                    print(return_code)
                    if return_code == 0:
                        print("device found increasing location")
                        ports += 1
                        file += 1
                        containerName += 1
                        print(ports)
                        print(file)
                        print(containerName)
                    if return_code == 1:
                        print("device not found restrating container")
                        process = subprocess.Popen([restartingContainer],stdout=subprocess.PIPE,stderr=subprocess.PIPE, encoding='utf8', shell=True)
                        return_code = process.returncode
                        print(restartingContainer)
                        print(return_code)
                        time.sleep(5)
                        print("device not found stoping container")
                        process = subprocess.Popen([stopingContainer],stdout=subprocess.PIPE,stderr=subprocess.PIPE, encoding='utf8', shell=True)
                        return_code = process.returncode
                        print(5)
                        print(stopingContainer)
                        print(return_code)

                        file +=1 
                    if file == len(list1):
                        print("surpass number of available files ")
                except:
                    print("failed to find devices")

            

if int(action) == 1:
    processes = []
    print("restarting")
    for counter in range(loop):
        devices = 'docker restart ' + containers[containerName]
        processes.append(Popen(devices, shell=True))
        containerName +=1
    for counter in range(loop):
        processes[counter].wait()    

if int(action) == 2:
    processes = []
    print("stoping")
    for counter in range(loop):
        devices = 'docker stop ' + containers[containerName]
        processes.append(Popen(devices, shell=True))
        containerName +=1
    for counter in range(loop):
        processes[counter].wait()
    time.sleep(8)
    print("containers have been stopped")
    createFolder()


if int(action) == 3:
    createFolder()


if int(action) == 4:
    processes = []
    print("stoping")
    for counter in range(loop):
        devices = 'docker stop ' + containers[containerName]
        processes.append(Popen(devices, shell=True))
        containerName +=1
    for counter in range(loop):
        processes[counter].wait()
    containerName =0
    time.sleep(9)
    process = subprocess.Popen(["adb devices"],stdout=subprocess.PIPE, encoding='utf8',stderr=None, shell=True)
    time.sleep(2)
    for counter in range(deviceLoop):
        devices = 'adb -s '+ mobile[deviceNumber]+' usb '
        processes.append(Popen(devices, shell=True))
        deviceNumber +=1
    for counter in range(deviceLoop):
        processes[counter].wait()
    time.sleep(3)
    createFolder()

if int(action) == 5:
    device = 'usb'+request
    #print(device)
    print('process has be started')
    test = "docker exec -it "+  device +" adb shell input keyevent 3 && sleep 1 && docker exec -it "+  device +" adb shell input keyevent KEYCODE_APP_SWITCH && docker exec -it "+  device +" adb shell input keyevent 20  && docker exec -it "+  device +" adb shell input keyevent 20 && docker exec -it "+  device +" adb shell input keyevent 20 && docker exec -it "+  device +" adb shell input keyevent 20  && docker exec -it "+  device +" adb shell input keyevent 19 && docker exec -it "+  device +" adb shell input keyevent 66  && sleep 2 && docker exec -it "+  device +" adb shell am start -a android.settings.AIRPLANE_MODE_SETTINGS &&  sleep 2 && docker exec -it "+  device +" adb shell input keyevent 20 && docker exec -it "+  device +" adb shell input keyevent 66 && sleep 2 && docker exec -it "+  device +" adb shell input keyevent 3 && time sleep 7 && docker exec -it "+  device +" adb shell input keyevent 20 && docker exec -it "+  device +" adb shell input keyevent 3"
    #print(test)
    process = subprocess.Popen([test],stdout=subprocess.PIPE,stderr=subprocess.PIPE, encoding='utf8', shell=True)
    (stdout, stderr) = process.communicate()
    return_code = process.returncode
    print("valdating return code ")
    print(return_code)
    print('done')

if int(action) == 6:
    device = 'usb'+request
    #print(device)
    test ="docker exec -it "+ device +" adb shell monkey -p com.anydesk.anydeskandroid -v 1"
    #print(test)
    process = subprocess.Popen([test],stdout=subprocess.PIPE,stderr=subprocess.PIPE, encoding='utf8', shell=True)
    (stdout, stderr) = process.communicate()
    return_code = process.returncode
    print("valdating return code ")
    print(return_code)
